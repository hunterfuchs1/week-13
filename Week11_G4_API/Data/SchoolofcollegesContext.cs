// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using Week11_G4_API.Models;

#nullable disable

namespace Week11_G4_API.Data
{
    public partial class SchoolofcollegesContext : DbContext
    {
        public SchoolofcollegesContext()
        {
        }

        public SchoolofcollegesContext(DbContextOptions<SchoolofcollegesContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Course> Courses { get; set; }
        public virtual DbSet<Credit> Credits { get; set; }
        public virtual DbSet<Instructor> Instructors { get; set; }
        public virtual DbSet<InstructorsCourse> InstructorsCourses { get; set; }
        public virtual DbSet<Student> Students { get; set; }
        public virtual DbSet<StudentsCourse> StudentsCourses { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.HasAnnotation("Relational:Collation", "SQL_Latin1_General_CP1_CI_AS");

            modelBuilder.Entity<Course>(entity =>
            {
                entity.ToTable("courses");

                entity.Property(e => e.CourseId)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("courseID");

                entity.Property(e => e.CourseEndDate)
                    .HasColumnType("date")
                    .HasColumnName("courseEndDate");

                entity.Property(e => e.CourseName)
                    .IsRequired()
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("courseName");

                entity.Property(e => e.CourseStartDate)
                    .HasColumnType("date")
                    .HasColumnName("courseStartDate");

                entity.Property(e => e.CreditId)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("creditID");

                entity.Property(e => e.InstructorId)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("instructorID");
            });

            modelBuilder.Entity<Credit>(entity =>
            {
                entity.ToTable("credits");

                entity.Property(e => e.CreditId)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("creditID");

                entity.Property(e => e.CreditValue).HasColumnName("creditValue");
            });

            modelBuilder.Entity<Instructor>(entity =>
            {
                entity.ToTable("instructors");

                entity.Property(e => e.InstructorId)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("instructorID");

                entity.Property(e => e.InstructorEmail)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("instructorEmail");

                entity.Property(e => e.InstructorFirstName)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("instructorFirstName");

                entity.Property(e => e.InstructorLastName)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("instructorLastName");

                entity.Property(e => e.InstructorSalary)
                    .HasColumnType("decimal(18, 0)")
                    .HasColumnName("instructorSalary");
            });

            modelBuilder.Entity<InstructorsCourse>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("instructorsCourses");

                entity.Property(e => e.CourseId)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("courseID");

                entity.Property(e => e.InstructorId)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("instructorID");
            });

            modelBuilder.Entity<Student>(entity =>
            {
                entity.ToTable("students");

                entity.Property(e => e.StudentId)
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("studentID");

                entity.Property(e => e.StudentEmail)
                    .HasMaxLength(30)
                    .IsUnicode(false)
                    .HasColumnName("studentEmail");

                entity.Property(e => e.StudentFirstName)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("studentFirstName");

                entity.Property(e => e.StudentLastName)
                    .HasMaxLength(20)
                    .IsUnicode(false)
                    .HasColumnName("studentLastName");

                entity.Property(e => e.StudentPhoneNumber)
                    .HasMaxLength(14)
                    .IsUnicode(false)
                    .HasColumnName("studentPhoneNumber");
            });

            modelBuilder.Entity<StudentsCourse>(entity =>
            {
                entity.HasNoKey();

                entity.ToTable("studentsCourses");

                entity.Property(e => e.CourseId)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("courseID");

                entity.Property(e => e.StudentId)
                    .IsRequired()
                    .HasMaxLength(10)
                    .IsUnicode(false)
                    .HasColumnName("studentID");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}